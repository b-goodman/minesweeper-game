{"version":3,"file":"index.js","sources":["../src/enums/CellEvents.ts","../src/util/FlagCounter.ts","../src/enums/EndgameStates.ts","../src/components/Cell/index.ts","../src/enums/GameEvents.ts","../src/util/Adjacency.ts","../src/util/Random.ts","../src/components/Toolbar/index.ts","../src/components/Grid/index.ts","../node_modules/@bgoodman/dialog-box/dist/index.js","../src/index.ts"],"sourcesContent":["enum CellEvents {\n    UNCOVERED = \"uncovered\",\n    FLAGGED = \"flagged\",\n    UNFLAGGED = \"unflagged\",\n    MINE_UNCOVERED = \"mine_uncovered\",\n    HIGHLIGHTED = \"highlighted\",\n    UNHIGHLIGHTED = \"unhighlighted\",\n    NEIGHBOR_REVEAL = \"neighbor_reveal\",\n    TRIGGER_CHAIN_REVEAL = \"trigger_chain_reveal\",\n};\n\nexport default CellEvents;","export default abstract class FlagCounter {\n\n    public static COUNT_UPDATE: string = \"flag_count_update\";\n    public static flagsRemaining: number;\n\n    public static setFlagsRemaining(newValue: number){\n        FlagCounter.flagsRemaining = newValue;\n        window.dispatchEvent(new CustomEvent<{newValue: number}>(FlagCounter.COUNT_UPDATE, {detail:{newValue: FlagCounter.flagsRemaining}}));\n    }\n\n}","enum EndgameStates {\n    WIN = \"win\",\n    LOSE = \"lose\",\n}\n\nexport default EndgameStates;","import tile from \"./Cell.scss\";\nimport CellEvents from \"../../enums/CellEvents\";\nimport FlagCounter from \"../../util/FlagCounter\";\nimport flagIcon from \"../icons/flag-icon.svg\";\nimport Adjacency from \"../../util/Adjacency\";\n\nexport interface CellEventDetails {\n        coordinate: [number, number]\n}\n\nexport default class Cell extends HTMLElement {\n\n    public readonly coordinate: [number, number];\n    public readonly isMined: boolean;\n    public readonly adjacentMines: number;\n\n    public static get observedAttributes() {\n        return [\"highlighted\", \"neighbor-highlight\", \"covered\", \"flagged\"];\n    }\n\n    constructor(coordinate: [number, number], isMined: boolean, adjacentMines: number) {\n        super();\n\n        this.isMined = isMined;\n        this.coordinate = coordinate;\n        this.adjacentMines = adjacentMines;\n\n        const customEventOptions = {\n            bubbles: true,\n            composed: true,\n            detail: {\n                coordinate: this.coordinate\n            },\n        };\n        this._highlightedEvent = new CustomEvent<CellEventDetails>(CellEvents.HIGHLIGHTED, customEventOptions);\n        this._unhighlightedEvent = new CustomEvent<CellEventDetails>(CellEvents.UNHIGHLIGHTED, customEventOptions);\n        this._uncoverEvent = new CustomEvent<CellEventDetails>(CellEvents.UNCOVERED, customEventOptions);\n        this._mineUncoveredEvent = new CustomEvent<CellEventDetails>(CellEvents.MINE_UNCOVERED, customEventOptions);\n        this._revealNeighborsEvent = new CustomEvent<CellEventDetails>(CellEvents.NEIGHBOR_REVEAL, customEventOptions);\n        this._triggerChainReveal = new CustomEvent<CellEventDetails>(CellEvents.TRIGGER_CHAIN_REVEAL, customEventOptions);\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${tile}</style>\n            <div id=\"cell-content\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._refContent = shadowRoot.querySelector<HTMLDivElement>(\"#cell-content\")!;\n    }\n\n    set isHighlighted(newState: boolean){\n        this.setAttribute(\"highlighted\", JSON.stringify(newState))\n    }\n\n    get isHighlighted(){\n        return JSON.parse(this.getAttribute(\"highlighted\") || \"false\");\n    }\n\n    set neighborHighlight(newState: boolean){\n        this.setAttribute(\"neighbor-highlight\", JSON.stringify(newState));\n    }\n\n    get neighborHighlight(){\n        return JSON.parse(this.getAttribute(\"neighbor-highlight\") || \"false\");\n    }\n\n    set covered(newState: boolean){\n        this.setAttribute(\"covered\", JSON.stringify(newState));\n    }\n\n    get covered(){\n        return JSON.parse(this.getAttribute(\"covered\") || \"true\");\n    }\n\n    set flagged(newState: boolean){\n        this.setAttribute(\"flagged\", JSON.stringify(newState));\n    }\n\n    get flagged(){\n        return JSON.parse(this.getAttribute(\"flagged\") || \"false\");\n    }\n\n    connectedCallback(){\n        this._addEventListeners();\n    }\n\n    disconnectedCallback(){\n        this._removeEventListeners();\n    }\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {\n        if (name === \"covered\" && _newVal === \"false\") {\n            if (!this._hasUncovered) {\n                this._hasUncovered = true;\n                this.dispatchEvent(this._uncoverEvent);\n                if (this.isMined) {\n                    this._removeEventListeners();\n                    this._handleMineReveal();\n                } else {\n                    this._handleStandardReveal();\n                }\n            }\n        }\n        if (name === \"flagged\") {\n            if (_newVal === \"true\" && FlagCounter.flagsRemaining > 0) {\n                FlagCounter.setFlagsRemaining(FlagCounter.flagsRemaining - 1);\n                this._refContent.innerHTML = flagIcon;\n            } else if (_oldVal === \"true\" && _newVal === \"false\") {\n                FlagCounter.setFlagsRemaining(FlagCounter.flagsRemaining + 1);\n                this._refContent.innerHTML = \"\";\n            }\n        }\n    }\n\n    private handleMouseEnter = (event?: MouseEvent) => {\n        this.isHighlighted = true;\n        this.dispatchEvent( this._highlightedEvent );\n    }\n\n    private handleMouseLeave = (event?: MouseEvent) => {\n        this.isHighlighted = false;\n        this.dispatchEvent( this._unhighlightedEvent );\n    }\n\n    private handleMouseClick = (event: MouseEvent) => {\n        // either reveal cell if un-flagged or un-flag if currently flagged\n        if (this.flagged) {\n            this.flagged = false;\n        } else {\n            this.covered = false;\n        }\n    }\n\n    private handleMouseAltClick = (event: MouseEvent) => {\n        // only allow flagging for covered cells\n        event.preventDefault();\n        if (this.covered && FlagCounter.flagsRemaining > 0) {\n            this.flagged = !this.flagged;\n        }\n    }\n\n    private handleMouseDblClick = (event: MouseEvent) => {\n        // only allow quick reveal of neighboring cells if this cell is uncovered\n        if (!this.covered) {\n            this.dispatchEvent(this._revealNeighborsEvent);\n        }\n    }\n\n    private _refContent: HTMLDivElement;\n    private _highlightedEvent: CustomEvent;\n    private _unhighlightedEvent: CustomEvent;\n    private _uncoverEvent: CustomEvent;\n    private _mineUncoveredEvent: CustomEvent;\n    private _revealNeighborsEvent: CustomEvent;\n    private _triggerChainReveal: CustomEvent;\n    private _hasChainRevealed: boolean = false;\n    private _hasUncovered: boolean = false;\n    private _inputEvents: Array<[keyof HTMLElementEventMap, any]> = [\n        [\"mouseenter\", this.handleMouseEnter],\n        [\"mouseleave\", this.handleMouseLeave],\n        [\"click\", this.handleMouseClick],\n        [\"contextmenu\", this.handleMouseAltClick],\n        [\"dblclick\", this.handleMouseDblClick],\n    ];\n\n    private _addEventListeners(){\n        this._inputEvents.forEach( (event) => {\n            this.addEventListener(...event);\n        })\n    }\n\n    public _removeEventListeners(){\n        this._inputEvents.forEach( (event) => {\n            this.removeEventListener(...event);\n        })\n    }\n\n    private _handleMineReveal = () => {\n        this.dispatchEvent(this._mineUncoveredEvent);\n        this.setAttribute(\"mine\", \"true\");\n        this.isHighlighted = false;\n        this.neighborHighlight = false;\n    }\n\n    private _handleStandardReveal = () => {\n        if (this.adjacentMines > 0) {\n            this._refContent.textContent = this.adjacentMines.toString();\n        } else {\n            if (!this._hasChainRevealed) {\n                this._hasChainRevealed = true;\n                this.isHighlighted = false;\n                this._removeEventListeners();\n                window.setTimeout(() => this.dispatchEvent(this._triggerChainReveal), 10);\n            }\n        }\n        this.classList.add(`adjacency-degree--${this.adjacentMines.toString()}`);\n    }\n}\n\nwindow.customElements.define(\"ms-tile\", Cell);","enum GameEvents {\n    GAME_END = \"game_end\",\n}\n\nexport default GameEvents;","export default abstract class Adjacency {\n    public static coordinates(origin: [number, number], dimensions: [number, number]) {\n        const adjacentCoordsArray: Array<[number, number]> = [\n            // [row, column]\n            [ origin[0], origin[1] + 1 ],\n            [ origin[0], origin[1] - 1 ],\n\n            [ origin[0] - 1 , origin[1] + 1 ],\n            [ origin[0] - 1, origin[1] - 1 ],\n            [ origin[0] - 1, origin[1] ],\n\n            [ origin[0] + 1, origin[1] + 1 ],\n            [ origin[0] + 1, origin[1] - 1 ],\n            [ origin[0] + 1, origin[1] ],\n        ];\n        // discard any out of bound values ( [0,0] to 'dimensions')\n        return adjacentCoordsArray.filter( coordinate => {\n            const isLowerBound = coordinate.every( xy => xy >= 0);\n            const isUpperBound = (coordinate[0] < dimensions[0] && coordinate[1] < dimensions[1]);\n            return isLowerBound && isUpperBound;\n        });\n    }\n}","export default abstract class Random {\n    public static int(min: number, max: number): number {\n        const _min = Math.ceil(min);\n        const _max = Math.floor(max);\n        return Math.floor(Math.random() * (_max - _min + 1)) + min;\n    }\n}","import style from \"./Toolbar.scss\";\nimport FlagCounter from \"../../util/FlagCounter\";\nimport clockIcon from \"../icons/clock-icon.svg\";\nimport flagIcon from \"../icons/flag-icon.svg\";\n\nexport default class Toolbar extends HTMLElement {\n\n    public static get observedAttributes() {\n        return [\"flags-remaining\"];\n    }\n\n    constructor(){\n        super();\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${style}</style>\n            <div id=\"toolbar-wrapper\">\n                <div class=\"icon-wrapper\">\n                    <div class=\"icon\">${flagIcon}</div>\n                    <div class=\"icon-lbl\" id=\"flags-remaining\"></div>\n                </div>\n                <div class=\"icon-wrapper\">\n                    <div class=\"icon\" id=\"clock-icon\">${clockIcon}</div>\n                    <div class=\"icon-lbl\" id=\"time-elapsed\">00:00</div>\n                </div>\n            </div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._refFlagCounter = shadowRoot.querySelector<HTMLDivElement>(\"#flags-remaining\")!;\n        this._refTimeElapsed = shadowRoot.querySelector<HTMLDivElement>(\"#time-elapsed\")!;\n        this.flagsRemaining = FlagCounter.flagsRemaining;\n        this._timerID = this.startTimer();\n    }\n\n    connectedCallback(){\n        window.addEventListener(FlagCounter.COUNT_UPDATE, (event: any) => {\n            this.flagsRemaining = event.detail.newValue;\n        })\n    }\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {\n        if (name === \"flags-remaining\") {\n            this._refFlagCounter.textContent = _newVal;\n        }\n    }\n\n    get flagsRemaining(){\n        return parseInt(this.getAttribute(\"flags-remaining\") || \"0\")\n    }\n\n    set flagsRemaining(newValue: number){\n        this.setAttribute(\"flags-remaining\", newValue.toString())\n    }\n\n    public addFlag(){\n        this.flagsRemaining = this.flagsRemaining + 1;\n    }\n\n    public removeFlag(){\n        this.flagsRemaining = this.flagsRemaining - 1;\n    }\n\n    public startTimer(){\n        return window.setInterval(this.handleTimeInc, 1000);\n    }\n\n    public stopTimer(){\n        window.clearInterval(this._timerID);\n    }\n\n    public resetTimer(){\n        this._timeElapsed = 0;\n    }\n\n    private _refFlagCounter: HTMLDivElement;\n    private _refTimeElapsed: HTMLDivElement;\n    private _timeElapsed: number = 0;\n    private _timerID: number;\n\n    private handleTimeInc = () => {\n        this._timeElapsed++;\n        const timeStr = [Math.floor(this._timeElapsed / 60), this._timeElapsed % 60].map( (digit) => {\n            return digit.toString().padStart(2, \"0\")\n        }).join(\":\");\n        this._refTimeElapsed.textContent = timeStr;\n    }\n\n}\n\nwindow.customElements.define(\"ms-toolbar\", Toolbar);\n","import grid from \"./Grid.scss\";\nimport Cell, {CellEventDetails} from \"../Cell/index\";\nimport CellEvents from \"../../enums/CellEvents\";\nimport EndgameStates from \"../../enums/EndgameStates\";\nimport GameEvents from \"../../enums/GameEvents\";\nimport Adjacency from \"../../util/Adjacency\";\nimport Random from \"../../util/Random\";\nimport Toolbar from \"../Toolbar/index\";\nimport FlagCounter from \"../../util/FlagCounter\";\n\nexport interface EndgameEventState {\n    state: EndgameStates;\n}\n\nexport default class Grid extends HTMLElement {\n\n    public static get observedAttributes() {\n        return [];\n    }\n\n    public readonly rows: number;\n    public readonly columns: number;\n    public readonly mines: number;\n    public hasGameLost: boolean = false;\n    public hasGameWon: boolean = false;\n\n    public cellRef: Array<Cell[]> = [];\n\n    constructor(columns: number, rows: number, options?:{mines?:number}) {\n        super();\n\n        this.rows = rows;\n        this.columns = columns;\n        this.mines = options?.mines || Math.floor(Math.sqrt(rows * columns));\n        FlagCounter.flagsRemaining = this.mines;\n        this._generateCelConstructorData();\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${grid}</style>\n            <div id='toolbar'></div>\n            <div id=\"row-container\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._rowContainer = shadowRoot.querySelector<HTMLDivElement>(\"#row-container\")!;\n        this._toolbarRef = shadowRoot.querySelector<HTMLDivElement>(\"#toolbar\")!.appendChild(new Toolbar());\n\n        for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n            this._insertRow(rowIndex);\n        };\n    }\n\n    connectedCallback(){\n        this.addEventListener(CellEvents.HIGHLIGHTED, this._handleCellHighlight);\n        this.addEventListener(CellEvents.UNHIGHLIGHTED, this._handleCellUnHighlight);\n        this.addEventListener(CellEvents.NEIGHBOR_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.MINE_UNCOVERED, this._handleMineUncovered, {once: true});\n        this.addEventListener(CellEvents.TRIGGER_CHAIN_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.UNCOVERED, this._checkEndGameStatus);\n    }\n\n    disconnectedCallback(){\n        this.addEventListener(CellEvents.HIGHLIGHTED, this._handleCellHighlight);\n        this.addEventListener(CellEvents.UNHIGHLIGHTED, this._handleCellUnHighlight);\n        this.addEventListener(CellEvents.NEIGHBOR_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.MINE_UNCOVERED, this._handleMineUncovered, {once: true});\n        this.addEventListener(CellEvents.TRIGGER_CHAIN_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.UNCOVERED, this._checkEndGameStatus)\n    }\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {}\n\n    private _toolbarRef: Toolbar;\n    private _rowContainer: HTMLDivElement;\n    private _cellConstructorData: Array<{isMined: boolean, adjacentMines: number}[]> = [];\n\n    private _generateCelConstructorData(){\n        let minesRemaining = this.mines;\n        // init data array\n        for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n            const cellRowData: {isMined: boolean, adjacentMines: number}[] = new Array(this.columns);\n            for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n                cellRowData[columnIndex] = {isMined: false, adjacentMines: 0}\n            };\n            this._cellConstructorData.push(cellRowData);\n        };\n        // set mines\n        do {\n            for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n                for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n                    if (!this._cellConstructorData[rowIndex][columnIndex].isMined && minesRemaining > 0 && Random.int(1,10) === 10) {\n                        this._cellConstructorData[rowIndex][columnIndex] = {isMined: true, adjacentMines: 0};\n                        minesRemaining--;\n                    }\n                };\n            }\n        } while (minesRemaining > 0);\n        // set adjacent mines for un-mined cells\n        for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n            for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n                if (!this._cellConstructorData[rowIndex][columnIndex].isMined) {\n                    this._cellConstructorData[rowIndex][columnIndex].adjacentMines = Adjacency.coordinates([rowIndex, columnIndex], [this.rows, this.columns])\n                        .map( (coord) => {\n                            return this._cellConstructorData[coord[0]][coord[1]].isMined ? 1 : 0;\n                        })\n                        .reduce((a:number, b:number) => a + b, 0);\n                }\n            };\n        };\n    }\n\n    private _insertRow(rowIndex: number){\n        const newRow = document.createElement(\"div\");\n        newRow.className = \"row\";\n        const rowRef: Cell[] = new Array(this.columns);\n        for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n            const cellData = this._cellConstructorData[rowIndex][columnIndex];\n            const tile = new Cell([rowIndex, columnIndex], cellData.isMined, cellData.adjacentMines);\n            rowRef[columnIndex] = tile;\n            newRow.appendChild( tile )\n        };\n        this.cellRef.push(rowRef);\n        this._rowContainer.appendChild(newRow);\n    }\n\n    private _revealCellNeighbors = (cellCoordinate: [number, number]) => {\n        const adjacentCoords = Adjacency.coordinates(cellCoordinate, [this.rows, this.columns]);\n        adjacentCoords.forEach( (coordinate) => {\n            const neighborCell = this.cellRef[coordinate[0]][coordinate[1]];\n            if (!neighborCell.flagged && neighborCell.covered){\n                neighborCell.covered = false;\n            }\n        });\n    };\n\n    private _handleCellHighlight = ((event: CustomEvent<CellEventDetails>): void => {\n        const cellCoord = event.detail.coordinate;\n        const targetCell = this.cellRef[cellCoord[0]][cellCoord[1]];\n        if (!targetCell.covered) {\n            const adjacentCoords = Adjacency.coordinates(event.detail.coordinate, [this.rows, this.columns]);\n            adjacentCoords.forEach( (coordinate) => {\n                const neighborCell = this.cellRef[coordinate[0]][coordinate[1]];\n                if (!neighborCell.flagged){\n                    neighborCell.neighborHighlight = true;\n                }\n            });\n        }\n    }) as EventListener;\n\n    private _handleCellUnHighlight = ((event: CustomEvent<CellEventDetails>): void => {\n        const adjacentCoords = Adjacency.coordinates(event.detail.coordinate, [this.rows, this.columns]);\n        adjacentCoords.forEach( (coordinate) => {\n            const neighborCell = this.cellRef[coordinate[0]][coordinate[1]];\n            if (!neighborCell.flagged){\n                neighborCell.neighborHighlight = false;\n            }\n        });\n    }) as EventListener;\n\n    private _handleNeighborReveal = ((event: CustomEvent<CellEventDetails>): void => {\n        this._revealCellNeighbors(event.detail.coordinate)\n    }) as EventListener;\n\n    private _handleMineUncovered = ((event: CustomEvent<CellEventDetails>): void => {\n        this.hasGameLost = true;\n        this._toolbarRef.stopTimer();\n        this.cellRef.flat().forEach( (cell) => {\n            cell.flagged = false;\n            cell.covered = false;\n            cell._removeEventListeners();\n        });\n        this.dispatchEvent( new CustomEvent<EndgameEventState>(GameEvents.GAME_END, {bubbles: true, composed: true, detail: {state: EndgameStates.LOSE}}) );\n    }) as EventListener;\n\n    private _checkEndGameStatus = ((event: CustomEvent<CellEventDetails>): void => {\n        const hasGameWon = !this.hasGameLost && this.cellRef.flat().filter( cell => !cell.isMined).every( cell => !cell.covered);\n        if (hasGameWon) {\n            this._toolbarRef.stopTimer();\n            this.cellRef.flat().forEach( (cell) => {\n                cell._removeEventListeners();\n            });\n            this.dispatchEvent( new CustomEvent<EndgameEventState>(GameEvents.GAME_END, {bubbles: true, composed: true, detail: {state: EndgameStates.WIN}}) );\n        };\n    }) as EventListener;\n\n}\n\nwindow.customElements.define(\"ms-grid\", Grid);","var css = \".row{display:flex;justify-content:center}.row div:not(:last-of-type){margin:0 5px 0 0}.btn,::slotted(.btn){font-size:16px;min-width:70px;height:30px;padding:0 3px;border:1px solid #000;border-radius:3px;text-align:center;line-height:30px;cursor:pointer}.btn:active,::slotted(.btn:active){box-shadow:inset 1px 1px grey}.primary,::slotted(.primary){background:#d4e8ea}.secondary,::slotted(.secondary){background:#ead4d4}div#dialog-title,slot[name=dialog-title]{font-weight:600;font-size:18px}div#dialog-content,slot[name=dialog-content]::slotted(div){padding:10px}:host([open=true]) #box{display:unset}:host([open=true]) #mask{display:unset;opacity:.5}:host{font-family:sans-serif}:host #box{padding:5px;height:auto;left:50%;top:50%;transform:translate(-50%,-50%);border:1px solid #000;background:#fff;width:300px;max-height:300px;min-height:100px;z-index:999}:host #box,:host #mask{display:none;position:absolute}:host #mask{top:0;left:0;background-color:rgba(0,0,0,.5);opacity:0;width:100vw;height:100vh;z-index:998;transition:opacity .4s ease-out}\";\n\nclass DialogBox extends HTMLElement {\r\n    constructor(opts) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;\r\n        super();\r\n        this._confirmBtnClickEvent = new Event(\"confirmed\");\r\n        this._cancelBtnClickEvent = new Event(\"cancelled\");\r\n        this._handleCancelBtnClick = (_event) => {\r\n            this.dispatchEvent(this._cancelBtnClickEvent);\r\n            this.open = false;\r\n        };\r\n        this._handleConfirmBtnClick = (_event) => {\r\n            if (this.closeOnConfirm) {\r\n                this.open = false;\r\n            }\r\n            this.dispatchEvent(this._confirmBtnClickEvent);\r\n        };\r\n        if ((_b = (_a = opts) === null || _a === void 0 ? void 0 : _a.confirmBtn) === null || _b === void 0 ? void 0 : _b.include)\r\n            this.confirmBtn = (_d = (_c = opts) === null || _c === void 0 ? void 0 : _c.confirmBtn) === null || _d === void 0 ? void 0 : _d.include;\r\n        if ((_f = (_e = opts) === null || _e === void 0 ? void 0 : _e.confirmBtn) === null || _f === void 0 ? void 0 : _f.lbl)\r\n            this.confirmLbl = (_h = (_g = opts) === null || _g === void 0 ? void 0 : _g.confirmBtn) === null || _h === void 0 ? void 0 : _h.lbl;\r\n        if ((_k = (_j = opts) === null || _j === void 0 ? void 0 : _j.cancelBtn) === null || _k === void 0 ? void 0 : _k.include)\r\n            this.cancelBtn = (_m = (_l = opts) === null || _l === void 0 ? void 0 : _l.cancelBtn) === null || _m === void 0 ? void 0 : _m.include;\r\n        if ((_p = (_o = opts) === null || _o === void 0 ? void 0 : _o.cancelBtn) === null || _p === void 0 ? void 0 : _p.lbl)\r\n            this.cancelLbl = (_r = (_q = opts) === null || _q === void 0 ? void 0 : _q.cancelBtn) === null || _r === void 0 ? void 0 : _r.lbl;\r\n        if ((_s = opts) === null || _s === void 0 ? void 0 : _s.closeOnConfirm)\r\n            this.closeOnConfirm = (_t = opts) === null || _t === void 0 ? void 0 : _t.closeOnConfirm;\r\n        const template = document.createElement('template');\r\n        template.innerHTML = `\n            <style>${css}</style>\n            <div id=\"box\">\n\n                <div id=\"dialog-content-wrapper\">\n                    <slot name=\"dialog-title\"></slot>\n                    <slot name=\"dialog-content\"></slot>\n                </div>\n\n                ${this.querySelector(\"[slot='dialog-control']\") === null\r\n            ? `<div class=\"row\">\n                            ${this.confirmBtn ? `<div class=\"btn primary\" id=\"confirm_btn\">${this.confirmLbl}</div>` : ``}\n                            ${this.cancelBtn ? `<div class=\"btn secondary\" id=\"cancel_btn\">${this.cancelLbl}</div>` : ``}\n                        </div>`\r\n            : `<slot name=\"dialog-control\" class=\"row\"></slot>`}\n            </div>\n            <div id=\"mask\"></div>\n        `;\r\n        const shadowRoot = this.attachShadow({ mode: 'open' });\r\n        shadowRoot.appendChild(template.content.cloneNode(true));\r\n        if (this.querySelector(\"[slot='dialog-title']\") === null) {\r\n            const title = document.createElement(\"div\");\r\n            title.slot = \"dialog-title\";\r\n            title.innerText = ((_u = opts) === null || _u === void 0 ? void 0 : _u.title) || \"\";\r\n            this.appendChild(title);\r\n        }\r\n        if (this.querySelector(\"[slot='dialog-content']\") === null) {\r\n            const content = document.createElement(\"div\");\r\n            content.slot = \"dialog-content\";\r\n            content.innerText = ((_v = opts) === null || _v === void 0 ? void 0 : _v.content) || \"\";\r\n            this.appendChild(content);\r\n        }\r\n        this._cancelBtnRef = shadowRoot.querySelector(\"#cancel_btn\") || undefined;\r\n        this._confirmBtnRef = shadowRoot.querySelector(\"#confirm_btn\") || undefined;\r\n        this._titleRef = this.querySelector(\"[slot='dialog-title']\");\r\n        this._contentRef = this.querySelector(\"[slot='dialog-content']\");\r\n    }\r\n    static get observedAttributes() {\r\n        return [\"open\"];\r\n    }\r\n    connectedCallback() {\r\n        if (this._cancelBtnRef) {\r\n            this._cancelBtnRef.addEventListener(\"click\", this._handleCancelBtnClick);\r\n        }\r\n        if (this._confirmBtnRef) {\r\n            this._confirmBtnRef.addEventListener(\"click\", this._handleConfirmBtnClick);\r\n        }\r\n    }\r\n    set open(newState) {\r\n        this.setAttribute(\"open\", JSON.stringify(newState));\r\n    }\r\n    get open() {\r\n        return this.hasAttribute(\"open\");\r\n    }\r\n    set closeOnConfirm(newState) {\r\n        this.setAttribute(\"close-on-confirm\", JSON.stringify(newState));\r\n    }\r\n    get closeOnConfirm() {\r\n        return JSON.parse(this.getAttribute(\"close-on-confirm\") || \"true\");\r\n    }\r\n    set confirmLbl(newLbl) {\r\n        this.setAttribute(\"confirm-lbl\", newLbl);\r\n    }\r\n    get confirmLbl() {\r\n        return this.getAttribute(\"confirm-lbl\") || \"OK\";\r\n    }\r\n    set confirmBtn(newState) {\r\n        this.setAttribute(\"confirm-btn\", JSON.stringify(newState));\r\n    }\r\n    get confirmBtn() {\r\n        return JSON.parse(this.getAttribute(\"confirm-btn\") || \"true\");\r\n    }\r\n    set cancelBtn(newState) {\r\n        this.setAttribute(\"cancel-btn\", JSON.stringify(newState));\r\n    }\r\n    get cancelBtn() {\r\n        return JSON.parse(this.getAttribute(\"cancel-btn\") || \"true\");\r\n    }\r\n    set cancelLbl(newLbl) {\r\n        this.setAttribute(\"cancel-lbl\", newLbl);\r\n    }\r\n    get cancelLbl() {\r\n        return this.getAttribute(\"cancel-lbl\") || \"Cancel\";\r\n    }\r\n    get dialogTitle() {\r\n        return this._titleRef.innerHTML;\r\n    }\r\n    set dialogTitle(newTitle) {\r\n        this._titleRef.innerText = newTitle;\r\n    }\r\n    get dialogContent() {\r\n        return this._contentRef.innerHTML;\r\n    }\r\n    set dialogContent(newContent) {\r\n        this._contentRef.innerHTML = newContent;\r\n    }\r\n}\r\nwindow.customElements.define(\"dialog-box\", DialogBox);\n\nexport default DialogBox;\n","import style from \"./index.scss\";\nimport Grid, {EndgameEventState} from \"./components/Grid/index\";\nimport GameEvent from \"./enums/GameEvents\";\n// import EndgameStates from \"./enums/EndgameStates\";\nimport DialogBox from \"@bgoodman/dialog-box\";\nimport EndgameStates from \"./enums/EndgameStates\";\n\nexport default class Minesweeper extends HTMLElement {\n\n    public static get observedAttributes() {\n        return [\"width\", \"height\"];\n    }\n\n    constructor(){\n        super();\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${style}</style>\n            <div id=\"grid-container\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._gridContainer = shadowRoot.querySelector<HTMLDivElement>(\"#grid-container\")!;\n        this._dialogBoxRef = shadowRoot.appendChild(\n            new DialogBox({\n                confirmBtn:{include: true, lbl: \"New Game\"},\n            })\n        );\n\n        this.addEventListener(GameEvent.GAME_END, this._handleGameEnd);\n        this._dialogBoxRef.addEventListener(\"confirmed\", () => {\n            this.newGame();\n        });\n    }\n\n    connectedCallback(){\n        this.newGame();\n    };\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {\n        if (name === \"width\" || name === \"height\") {\n            this.newGame();\n        }\n    }\n\n    get width(){\n        return parseInt(this.getAttribute(\"width\") || \"10\");\n    }\n\n    set width(newValue: number){\n        this.setAttribute(\"width\", newValue.toString());\n    }\n\n    get height(){\n        return parseInt(this.getAttribute(\"height\") || \"10\");\n    }\n\n    set height(newValue: number){\n        this.setAttribute(\"height\", newValue.toString());\n    }\n\n    public newGame(){\n        this._gridContainer.childNodes.forEach( node => node.remove());\n        this._gridContainer.appendChild( new Grid(this.width, this.height) );\n    }\n\n\n\n    private _gridContainer: HTMLDivElement;\n    private _dialogBoxRef: DialogBox;\n\n    private _handleGameEnd = ((_event: CustomEvent<EndgameEventState>) => {\n        console.log(\"Game Over: \", _event.detail.state);\n        this._dialogBoxRef.dialogTitle = (_event.detail.state === EndgameStates.WIN) ? \"You win\" : \"Game Over\";\n        this._dialogBoxRef.dialogContent = (_event.detail.state === EndgameStates.WIN) ? \"All safe tiles uncovered.\" : \"You uncovered a mine.\";\n        this._dialogBoxRef.open = true;\n    }) as EventListener\n}\n\nwindow.customElements.define(\"minesweeper-game\", Minesweeper);"],"names":["CellEvents","FlagCounter","[object Object]","newValue","flagsRemaining","window","dispatchEvent","CustomEvent","COUNT_UPDATE","detail","EndgameStates","Cell","HTMLElement","coordinate","isMined","adjacentMines","super","this","event","isHighlighted","_highlightedEvent","_unhighlightedEvent","flagged","covered","preventDefault","_revealNeighborsEvent","handleMouseEnter","handleMouseLeave","handleMouseClick","handleMouseAltClick","handleMouseDblClick","_mineUncoveredEvent","setAttribute","neighborHighlight","_refContent","textContent","toString","_hasChainRevealed","_removeEventListeners","setTimeout","_triggerChainReveal","classList","add","customEventOptions","bubbles","composed","HIGHLIGHTED","UNHIGHLIGHTED","_uncoverEvent","UNCOVERED","MINE_UNCOVERED","NEIGHBOR_REVEAL","TRIGGER_CHAIN_REVEAL","template","document","createElement","innerHTML","shadowRoot","attachShadow","mode","appendChild","content","cloneNode","querySelector","observedAttributes","newState","JSON","stringify","parse","getAttribute","_addEventListeners","name","_oldVal","_newVal","_hasUncovered","_handleMineReveal","_handleStandardReveal","setFlagsRemaining","flagIcon","_inputEvents","forEach","addEventListener","removeEventListener","customElements","define","GameEvents","Adjacency","origin","dimensions","filter","isLowerBound","every","xy","isUpperBound","Random","min","max","_min","Math","ceil","_max","floor","random","Toolbar","_timeElapsed","timeStr","map","digit","padStart","join","_refTimeElapsed","_refFlagCounter","_timerID","startTimer","parseInt","setInterval","handleTimeInc","clearInterval","Grid","columns","rows","options","cellCoordinate","coordinates","neighborCell","cellRef","cellCoord","_revealCellNeighbors","hasGameLost","_toolbarRef","stopTimer","flat","cell","GAME_END","state","LOSE","WIN","mines","sqrt","_generateCelConstructorData","_rowContainer","rowIndex","_insertRow","_handleCellHighlight","_handleCellUnHighlight","_handleNeighborReveal","_handleMineUncovered","once","_checkEndGameStatus","minesRemaining","cellRowData","Array","columnIndex","_cellConstructorData","push","int","coord","reduce","a","b","newRow","className","rowRef","cellData","tile","DialogBox","opts","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_confirmBtnClickEvent","Event","_cancelBtnClickEvent","_handleCancelBtnClick","_event","open","_handleConfirmBtnClick","closeOnConfirm","confirmBtn","include","lbl","confirmLbl","cancelBtn","cancelLbl","title","slot","innerText","_cancelBtnRef","undefined","_confirmBtnRef","_titleRef","_contentRef","hasAttribute","newLbl","dialogTitle","newTitle","dialogContent","newContent","Minesweeper","console","log","_dialogBoxRef","_gridContainer","GameEvent","_handleGameEnd","newGame","width","height","childNodes","node","remove"],"mappings":"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"}