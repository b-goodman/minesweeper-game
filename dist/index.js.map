{"version":3,"file":"index.js","sources":["../src/enums/CellEvents.ts","../src/util/FlagCounter.ts","../src/enums/EndgameStates.ts","../src/components/Cell/index.ts","../src/enums/GameEvents.ts","../src/util/Adjacency.ts","../src/util/Random.ts","../src/components/Toolbar/index.ts","../src/components/Grid/index.ts","../src/components/GameDialogBox/index.ts","../src/index.ts"],"sourcesContent":["enum CellEvents {\n    UNCOVERED = \"uncovered\",\n    FLAGGED = \"flagged\",\n    UNFLAGGED = \"unflagged\",\n    MINE_UNCOVERED = \"mine_uncovered\",\n    HIGHLIGHTED = \"highlighted\",\n    UNHIGHLIGHTED = \"unhighlighted\",\n    NEIGHBOR_REVEAL = \"neighbor_reveal\",\n    TRIGGER_CHAIN_REVEAL = \"trigger_chain_reveal\",\n};\n\nexport default CellEvents;","export default abstract class FlagCounter {\n\n    public static COUNT_UPDATE: string = \"flag_count_update\";\n    public static flagsRemaining: number;\n\n    public static setFlagsRemaining(newValue: number){\n        FlagCounter.flagsRemaining = newValue;\n        window.dispatchEvent(new CustomEvent<{newValue: number}>(FlagCounter.COUNT_UPDATE, {detail:{newValue: FlagCounter.flagsRemaining}}));\n    }\n\n}","enum EndgameStates {\n    WIN = \"win\",\n    LOSE = \"lose\",\n}\n\nexport default EndgameStates;","import tile from \"./Cell.scss\";\nimport CellEvents from \"../../enums/CellEvents\";\nimport FlagCounter from \"../../util/FlagCounter\";\nimport flagIcon from \"../icons/flag-icon.svg\";\nimport Adjacency from \"../../util/Adjacency\";\n\nexport interface CellEventDetails {\n        coordinate: [number, number]\n}\n\nexport default class Cell extends HTMLElement {\n\n    public readonly coordinate: [number, number];\n    public readonly isMined: boolean;\n    public readonly adjacentMines: number;\n\n    public static get observedAttributes() {\n        return [\"highlighted\", \"neighbor-highlight\", \"covered\", \"flagged\"];\n    }\n\n    constructor(coordinate: [number, number], isMined: boolean, adjacentMines: number, opts?:{scale?: number}) {\n        super();\n\n        this.isMined = isMined;\n        this.coordinate = coordinate;\n        this.adjacentMines = adjacentMines;\n\n        const cellScale = opts?.scale || 1;\n        this.style.setProperty( \"--edge-length\", (cellScale * 50).toString() + \"px\" );\n        this.style.setProperty( \"--svg-scale\", cellScale.toString() );\n        // const svgTranslate = `${(cellScale < 1 ? 1 : -1) * ( (cellScale - 1 ) ) * 100}%`;\n        // this.style.setProperty( \"--svg-translate\", `${svgTranslate},${svgTranslate}` );\n\n        const customEventOptions = {\n            bubbles: true,\n            composed: true,\n            detail: {\n                coordinate: this.coordinate\n            },\n        };\n        this._highlightedEvent = new CustomEvent<CellEventDetails>(CellEvents.HIGHLIGHTED, customEventOptions);\n        this._unhighlightedEvent = new CustomEvent<CellEventDetails>(CellEvents.UNHIGHLIGHTED, customEventOptions);\n        this._uncoverEvent = new CustomEvent<CellEventDetails>(CellEvents.UNCOVERED, customEventOptions);\n        this._mineUncoveredEvent = new CustomEvent<CellEventDetails>(CellEvents.MINE_UNCOVERED, customEventOptions);\n        this._revealNeighborsEvent = new CustomEvent<CellEventDetails>(CellEvents.NEIGHBOR_REVEAL, customEventOptions);\n        this._triggerChainReveal = new CustomEvent<CellEventDetails>(CellEvents.TRIGGER_CHAIN_REVEAL, customEventOptions);\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${tile}</style>\n            <div id=\"cell-content\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._refContent = shadowRoot.querySelector<HTMLDivElement>(\"#cell-content\")!;\n    }\n\n    set isHighlighted(newState: boolean){\n        this.setAttribute(\"highlighted\", JSON.stringify(newState))\n    }\n\n    get isHighlighted(){\n        return JSON.parse(this.getAttribute(\"highlighted\") || \"false\");\n    }\n\n    set neighborHighlight(newState: boolean){\n        this.setAttribute(\"neighbor-highlight\", JSON.stringify(newState));\n    }\n\n    get neighborHighlight(){\n        return JSON.parse(this.getAttribute(\"neighbor-highlight\") || \"false\");\n    }\n\n    set covered(newState: boolean){\n        this.setAttribute(\"covered\", JSON.stringify(newState));\n    }\n\n    get covered(){\n        return JSON.parse(this.getAttribute(\"covered\") || \"true\");\n    }\n\n    set flagged(newState: boolean){\n        this.setAttribute(\"flagged\", JSON.stringify(newState));\n    }\n\n    get flagged(){\n        return JSON.parse(this.getAttribute(\"flagged\") || \"false\");\n    }\n\n    connectedCallback(){\n        this._addEventListeners();\n    }\n\n    disconnectedCallback(){\n        this._removeEventListeners();\n    }\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {\n        if (name === \"covered\" && _newVal === \"false\") {\n            if (!this._hasUncovered) {\n                this._hasUncovered = true;\n                this.dispatchEvent(this._uncoverEvent);\n                if (this.isMined) {\n                    this._removeEventListeners();\n                    this._handleMineReveal();\n                } else {\n                    this._handleStandardReveal();\n                }\n            }\n        }\n        if (name === \"flagged\") {\n            if (_newVal === \"true\" && FlagCounter.flagsRemaining > 0) {\n                FlagCounter.setFlagsRemaining(FlagCounter.flagsRemaining - 1);\n                this._refContent.innerHTML = flagIcon;\n            } else if (_oldVal === \"true\" && _newVal === \"false\") {\n                FlagCounter.setFlagsRemaining(FlagCounter.flagsRemaining + 1);\n                this._refContent.innerHTML = \"\";\n            }\n        }\n    }\n\n    private handleMouseEnter = (event?: MouseEvent) => {\n        this.isHighlighted = true;\n        this.dispatchEvent( this._highlightedEvent );\n    }\n\n    private handleMouseLeave = (event?: MouseEvent) => {\n        this.isHighlighted = false;\n        this.dispatchEvent( this._unhighlightedEvent );\n    }\n\n    private handleMouseClick = (event: MouseEvent) => {\n        // either reveal cell if un-flagged or un-flag if currently flagged\n        if (this.flagged) {\n            this.flagged = false;\n        } else {\n            this.covered = false;\n        }\n    }\n\n    private handleMouseAltClick = (event: MouseEvent) => {\n        // only allow flagging for covered cells\n        event.preventDefault();\n        if (this.covered && FlagCounter.flagsRemaining > 0) {\n            this.flagged = !this.flagged;\n        }\n    }\n\n    private handleMouseDblClick = (event: MouseEvent) => {\n        // only allow quick reveal of neighboring cells if this cell is uncovered\n        if (!this.covered) {\n            this.dispatchEvent(this._revealNeighborsEvent);\n        }\n    }\n\n    private _refContent: HTMLDivElement;\n    private _highlightedEvent: CustomEvent;\n    private _unhighlightedEvent: CustomEvent;\n    private _uncoverEvent: CustomEvent;\n    private _mineUncoveredEvent: CustomEvent;\n    private _revealNeighborsEvent: CustomEvent;\n    private _triggerChainReveal: CustomEvent;\n    private _hasChainRevealed: boolean = false;\n    private _hasUncovered: boolean = false;\n    private _inputEvents: Array<[keyof HTMLElementEventMap, any]> = [\n        [\"mouseenter\", this.handleMouseEnter],\n        [\"mouseleave\", this.handleMouseLeave],\n        [\"click\", this.handleMouseClick],\n        [\"contextmenu\", this.handleMouseAltClick],\n        [\"dblclick\", this.handleMouseDblClick],\n    ];\n\n    private _addEventListeners(){\n        this._inputEvents.forEach( (event) => {\n            this.addEventListener(...event);\n        })\n    }\n\n    public _removeEventListeners(){\n        this._inputEvents.forEach( (event) => {\n            this.removeEventListener(...event);\n        })\n    }\n\n    private _handleMineReveal = () => {\n        this.dispatchEvent(this._mineUncoveredEvent);\n        this.setAttribute(\"mine\", \"true\");\n        this.isHighlighted = false;\n        this.neighborHighlight = false;\n    }\n\n    private _handleStandardReveal = () => {\n        if (this.adjacentMines > 0) {\n            this._refContent.textContent = this.adjacentMines.toString();\n        } else {\n            if (!this._hasChainRevealed) {\n                this._hasChainRevealed = true;\n                this.isHighlighted = false;\n                this._removeEventListeners();\n                window.setTimeout(() => this.dispatchEvent(this._triggerChainReveal), 10);\n            }\n        }\n        this.classList.add(`adjacency-degree--${this.adjacentMines.toString()}`);\n    }\n}\n\nwindow.customElements.define(\"ms-tile\", Cell);","enum GameEvents {\n    GAME_END = \"game_end\",\n}\n\nexport default GameEvents;","export default abstract class Adjacency {\n    public static coordinates(origin: [number, number], dimensions: [number, number]) {\n        const adjacentCoordsArray: Array<[number, number]> = [\n            // [row, column]\n            [ origin[0], origin[1] + 1 ],\n            [ origin[0], origin[1] - 1 ],\n\n            [ origin[0] - 1 , origin[1] + 1 ],\n            [ origin[0] - 1, origin[1] - 1 ],\n            [ origin[0] - 1, origin[1] ],\n\n            [ origin[0] + 1, origin[1] + 1 ],\n            [ origin[0] + 1, origin[1] - 1 ],\n            [ origin[0] + 1, origin[1] ],\n        ];\n        // discard any out of bound values ( [0,0] to 'dimensions')\n        return adjacentCoordsArray.filter( coordinate => {\n            const isLowerBound = coordinate.every( xy => xy >= 0);\n            const isUpperBound = (coordinate[0] < dimensions[0] && coordinate[1] < dimensions[1]);\n            return isLowerBound && isUpperBound;\n        });\n    }\n}","export default abstract class Random {\n    public static int(min: number, max: number): number {\n        const _min = Math.ceil(min);\n        const _max = Math.floor(max);\n        return Math.floor(Math.random() * (_max - _min + 1)) + min;\n    }\n}","import style from \"./Toolbar.scss\";\nimport FlagCounter from \"../../util/FlagCounter\";\nimport clockIcon from \"../icons/clock-icon.svg\";\nimport flagIcon from \"../icons/flag-icon.svg\";\n\nexport default class Toolbar extends HTMLElement {\n\n    public static get observedAttributes() {\n        return [\"flags-remaining\"];\n    }\n\n    constructor(){\n        super();\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${style}</style>\n            <div id=\"toolbar-wrapper\">\n                <div class=\"icon-wrapper\">\n                    <div class=\"icon\">${flagIcon}</div>\n                    <div class=\"icon-lbl\" id=\"flags-remaining\"></div>\n                </div>\n                <div class=\"icon-wrapper\">\n                    <div class=\"icon\" id=\"clock-icon\">${clockIcon}</div>\n                    <div class=\"icon-lbl\" id=\"time-elapsed\">00:00</div>\n                </div>\n            </div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._refFlagCounter = shadowRoot.querySelector<HTMLDivElement>(\"#flags-remaining\")!;\n        this._refTimeElapsed = shadowRoot.querySelector<HTMLDivElement>(\"#time-elapsed\")!;\n        this.flagsRemaining = FlagCounter.flagsRemaining;\n        this._timerID = this.startTimer();\n    }\n\n    connectedCallback(){\n        window.addEventListener(FlagCounter.COUNT_UPDATE, (event: any) => {\n            this.flagsRemaining = event.detail.newValue;\n        })\n    }\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {\n        if (name === \"flags-remaining\") {\n            this._refFlagCounter.textContent = _newVal;\n        }\n    }\n\n    get flagsRemaining(){\n        return parseInt(this.getAttribute(\"flags-remaining\") || \"0\")\n    }\n\n    set flagsRemaining(newValue: number){\n        this.setAttribute(\"flags-remaining\", newValue.toString())\n    }\n\n    public addFlag(){\n        this.flagsRemaining = this.flagsRemaining + 1;\n    }\n\n    public removeFlag(){\n        this.flagsRemaining = this.flagsRemaining - 1;\n    }\n\n    public startTimer(){\n        return window.setInterval(this.handleTimeInc, 1000);\n    }\n\n    public stopTimer(){\n        window.clearInterval(this._timerID);\n    }\n\n    public resetTimer(){\n        this._timeElapsed = 0;\n    }\n\n    private _refFlagCounter: HTMLDivElement;\n    private _refTimeElapsed: HTMLDivElement;\n    private _timeElapsed: number = 0;\n    private _timerID: number;\n\n    private handleTimeInc = () => {\n        this._timeElapsed++;\n        const timeStr = [Math.floor(this._timeElapsed / 60), this._timeElapsed % 60].map( (digit) => {\n            return digit.toString().padStart(2, \"0\")\n        }).join(\":\");\n        this._refTimeElapsed.textContent = timeStr;\n    }\n\n}\n\nwindow.customElements.define(\"ms-toolbar\", Toolbar);\n","import grid from \"./Grid.scss\";\nimport Cell, {CellEventDetails} from \"../Cell/index\";\nimport CellEvents from \"../../enums/CellEvents\";\nimport EndgameStates from \"../../enums/EndgameStates\";\nimport GameEvents from \"../../enums/GameEvents\";\nimport Adjacency from \"../../util/Adjacency\";\nimport Random from \"../../util/Random\";\nimport Toolbar from \"../Toolbar/index\";\nimport FlagCounter from \"../../util/FlagCounter\";\n\nexport interface EndgameEventState {\n    state: EndgameStates;\n}\n\nexport default class Grid extends HTMLElement {\n\n    public static get observedAttributes() {\n        return [];\n    }\n\n    public readonly rows: number;\n    public readonly columns: number;\n    public readonly mines: number;\n    public hasGameLost: boolean = false;\n    public hasGameWon: boolean = false;\n\n    public cellRef: Array<Cell[]> = [];\n\n    constructor(columns: number, rows: number, options?:{mines?:number, scale?: number}) {\n        super();\n\n        this.scale = options?.scale || 1;\n        this.style.setProperty( \"--grid-width\", (this.scale * 50 * columns).toString() + \"px\" );\n\n        this.rows = rows;\n        this.columns = columns;\n        this.mines = options?.mines || Math.floor(Math.sqrt(rows * columns));\n        FlagCounter.flagsRemaining = this.mines;\n        this._generateCelConstructorData();\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${grid}</style>\n            <div id='toolbar'></div>\n            <div id=\"row-container\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._rowContainer = shadowRoot.querySelector<HTMLDivElement>(\"#row-container\")!;\n        this._toolbarRef = shadowRoot.querySelector<HTMLDivElement>(\"#toolbar\")!.appendChild(new Toolbar());\n\n        for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n            this._insertRow(rowIndex);\n        };\n    }\n\n    connectedCallback(){\n        this.addEventListener(CellEvents.HIGHLIGHTED, this._handleCellHighlight);\n        this.addEventListener(CellEvents.UNHIGHLIGHTED, this._handleCellUnHighlight);\n        this.addEventListener(CellEvents.NEIGHBOR_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.MINE_UNCOVERED, this._handleMineUncovered, {once: true});\n        this.addEventListener(CellEvents.TRIGGER_CHAIN_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.UNCOVERED, this._checkEndGameStatus);\n    }\n\n    disconnectedCallback(){\n        this.addEventListener(CellEvents.HIGHLIGHTED, this._handleCellHighlight);\n        this.addEventListener(CellEvents.UNHIGHLIGHTED, this._handleCellUnHighlight);\n        this.addEventListener(CellEvents.NEIGHBOR_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.MINE_UNCOVERED, this._handleMineUncovered, {once: true});\n        this.addEventListener(CellEvents.TRIGGER_CHAIN_REVEAL, this._handleNeighborReveal);\n        this.addEventListener(CellEvents.UNCOVERED, this._checkEndGameStatus)\n    }\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {}\n\n    private _toolbarRef: Toolbar;\n    private _rowContainer: HTMLDivElement;\n    private _cellConstructorData: Array<{isMined: boolean, adjacentMines: number}[]> = [];\n    private scale?: number;\n\n    private _generateCelConstructorData(){\n        let minesRemaining = this.mines;\n        // init data array\n        for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n            const cellRowData: {isMined: boolean, adjacentMines: number}[] = new Array(this.columns);\n            for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n                cellRowData[columnIndex] = {isMined: false, adjacentMines: 0}\n            };\n            this._cellConstructorData.push(cellRowData);\n        };\n        // set mines\n        do {\n            for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n                for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n                    if (!this._cellConstructorData[rowIndex][columnIndex].isMined && minesRemaining > 0 && Random.int(1,10) === 10) {\n                        this._cellConstructorData[rowIndex][columnIndex] = {isMined: true, adjacentMines: 0};\n                        minesRemaining--;\n                    }\n                };\n            }\n        } while (minesRemaining > 0);\n        // set adjacent mines for un-mined cells\n        for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\n            for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n                if (!this._cellConstructorData[rowIndex][columnIndex].isMined) {\n                    this._cellConstructorData[rowIndex][columnIndex].adjacentMines = Adjacency.coordinates([rowIndex, columnIndex], [this.rows, this.columns])\n                        .map( (coord) => {\n                            return this._cellConstructorData[coord[0]][coord[1]].isMined ? 1 : 0;\n                        })\n                        .reduce((a:number, b:number) => a + b, 0);\n                }\n            };\n        };\n    }\n\n    private _insertRow(rowIndex: number){\n        const newRow = document.createElement(\"div\");\n        newRow.className = \"row\";\n        const rowRef: Cell[] = new Array(this.columns);\n        for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\n            const cellData = this._cellConstructorData[rowIndex][columnIndex];\n            const tile = new Cell([rowIndex, columnIndex], cellData.isMined, cellData.adjacentMines, {scale: this.scale});\n            rowRef[columnIndex] = tile;\n            newRow.appendChild( tile )\n        };\n        this.cellRef.push(rowRef);\n        this._rowContainer.appendChild(newRow);\n    }\n\n    private _revealCellNeighbors = (cellCoordinate: [number, number]) => {\n        const adjacentCoords = Adjacency.coordinates(cellCoordinate, [this.rows, this.columns]);\n        adjacentCoords.forEach( (coordinate) => {\n            const neighborCell = this.cellRef[coordinate[0]][coordinate[1]];\n            if (!neighborCell.flagged && neighborCell.covered){\n                neighborCell.covered = false;\n            }\n        });\n    };\n\n    private _handleCellHighlight = ((event: CustomEvent<CellEventDetails>): void => {\n        const cellCoord = event.detail.coordinate;\n        const targetCell = this.cellRef[cellCoord[0]][cellCoord[1]];\n        if (!targetCell.covered) {\n            const adjacentCoords = Adjacency.coordinates(event.detail.coordinate, [this.rows, this.columns]);\n            adjacentCoords.forEach( (coordinate) => {\n                const neighborCell = this.cellRef[coordinate[0]][coordinate[1]];\n                if (!neighborCell.flagged){\n                    neighborCell.neighborHighlight = true;\n                }\n            });\n        }\n    }) as EventListener;\n\n    private _handleCellUnHighlight = ((event: CustomEvent<CellEventDetails>): void => {\n        const adjacentCoords = Adjacency.coordinates(event.detail.coordinate, [this.rows, this.columns]);\n        adjacentCoords.forEach( (coordinate) => {\n            const neighborCell = this.cellRef[coordinate[0]][coordinate[1]];\n            if (!neighborCell.flagged){\n                neighborCell.neighborHighlight = false;\n            }\n        });\n    }) as EventListener;\n\n    private _handleNeighborReveal = ((event: CustomEvent<CellEventDetails>): void => {\n        this._revealCellNeighbors(event.detail.coordinate)\n    }) as EventListener;\n\n    private _handleMineUncovered = ((event: CustomEvent<CellEventDetails>): void => {\n        this.hasGameLost = true;\n        this._toolbarRef.stopTimer();\n        this.cellRef.flat().forEach( (cell) => {\n            cell.flagged = false;\n            cell.covered = false;\n            cell._removeEventListeners();\n        });\n        this.dispatchEvent( new CustomEvent<EndgameEventState>(GameEvents.GAME_END, {bubbles: true, composed: true, detail: {state: EndgameStates.LOSE}}) );\n    }) as EventListener;\n\n    private _checkEndGameStatus = ((event: CustomEvent<CellEventDetails>): void => {\n        const hasGameWon = !this.hasGameLost && this.cellRef.flat().filter( cell => !cell.isMined).every( cell => !cell.covered);\n        if (hasGameWon) {\n            this._toolbarRef.stopTimer();\n            this.cellRef.flat().forEach( (cell) => {\n                cell._removeEventListeners();\n            });\n            this.dispatchEvent( new CustomEvent<EndgameEventState>(GameEvents.GAME_END, {bubbles: true, composed: true, detail: {state: EndgameStates.WIN}}) );\n        };\n    }) as EventListener;\n\n}\n\nwindow.customElements.define(\"ms-grid\", Grid);","import style from \"./Dialog.scss\";\n\n\nexport default class GameDialogBox extends HTMLElement {\n\n    static get observedAttributes() {\n        return [\"open\"];\n    }\n\n    constructor(\n        opts?:{\n            title?: string,\n            content?: string,\n            confirmBtn?:{\n                include?: boolean,\n                lbl?:string\n            },\n            cancelBtn?:{\n                include?: boolean,\n                lbl?:string\n            },\n            closeOnConfirm?:boolean\n        }\n        ) {\n        super();\n\n        if (opts?.confirmBtn?.include) this.confirmBtn = opts?.confirmBtn?.include;\n        if (opts?.confirmBtn?.lbl) this.confirmLbl = opts?.confirmBtn?.lbl;\n        if (opts?.cancelBtn?.include) this.cancelBtn = opts?.cancelBtn?.include;\n        if (opts?.cancelBtn?.lbl) this.cancelLbl = opts?.cancelBtn?.lbl;\n        if (opts?.closeOnConfirm) this.closeOnConfirm = opts?.closeOnConfirm;\n\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${style}</style>\n            <div id=\"box\">\n\n                <div id=\"dialog-content-wrapper\">\n                    <slot name=\"dialog-title\"></slot>\n                    <slot name=\"dialog-content\"></slot>\n                </div>\n\n                ${this.querySelector(\"[slot='dialog-control']\") === null\n                    ? `<div class=\"row\">\n                            ${ this.confirmBtn ? `<div class=\"btn primary\" id=\"confirm_btn\">${this.confirmLbl}</div>` : ``}\n                            ${ this.cancelBtn ? `<div class=\"btn secondary\" id=\"cancel_btn\">${this.cancelLbl}</div>` : `` }\n                        </div>`\n                    : `<slot name=\"dialog-control\" class=\"row\"></slot>`\n                }\n            </div>\n            <div id=\"mask\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n\n        if (this.querySelector(\"[slot='dialog-title']\") === null) {\n            const title = document.createElement(\"div\");\n            title.slot = \"dialog-title\";\n            title.innerText = opts?.title || \"\";\n            this.appendChild(title);\n        };\n\n        if (this.querySelector(\"[slot='dialog-content']\") === null) {\n            const content = document.createElement(\"div\");\n            content.slot = \"dialog-content\";\n            content.innerText = opts?.content || \"\";\n            this.appendChild(content);\n        }\n\n        this._cancelBtnRef = shadowRoot.querySelector<HTMLDivElement>(\"#cancel_btn\") || undefined;\n        this._confirmBtnRef = shadowRoot.querySelector<HTMLDivElement>(\"#confirm_btn\") || undefined;\n\n        this._titleRef = this.querySelector<HTMLDivElement>(\"[slot='dialog-title']\")!;\n        this._contentRef = this.querySelector<HTMLDivElement>(\"[slot='dialog-content']\")!;\n    }\n\n    // attributeChangedCallback(name: string, _oldVal: string, newVal: string) {}\n\n    connectedCallback() {\n        if (this._cancelBtnRef) {\n            this._cancelBtnRef.addEventListener(\"click\", this._handleCancelBtnClick)\n        };\n        if (this._confirmBtnRef) {\n            this._confirmBtnRef.addEventListener(\"click\", this._handleConfirmBtnClick)\n        }\n    }\n\n    // disconnecetdCallback() {}\n\n    set open(newState: boolean){\n        this.setAttribute(\"open\", JSON.stringify(newState));\n    }\n\n    get open(){\n        return this.hasAttribute(\"open\");\n    }\n\n    set closeOnConfirm(newState: boolean){\n        this.setAttribute(\"close-on-confirm\", JSON.stringify(newState))\n    }\n\n    get closeOnConfirm(){\n        return JSON.parse(this.getAttribute(\"close-on-confirm\") || \"true\");\n    }\n\n    set confirmLbl(newLbl: string){\n        this.setAttribute(\"confirm-lbl\", newLbl);\n    }\n\n    get confirmLbl(){\n        return this.getAttribute(\"confirm-lbl\") || \"OK\";\n    }\n\n    set confirmBtn(newState: boolean){\n        this.setAttribute(\"confirm-btn\", JSON.stringify(newState))\n    }\n\n    get confirmBtn(){\n        return JSON.parse(this.getAttribute(\"confirm-btn\") || \"true\");\n    }\n\n    set cancelBtn(newState: boolean){\n        this.setAttribute(\"cancel-btn\", JSON.stringify(newState))\n    }\n\n    get cancelBtn(){\n        return JSON.parse(this.getAttribute(\"cancel-btn\") || \"true\");\n    }\n\n    set cancelLbl(newLbl: string){\n        this.setAttribute(\"cancel-lbl\", newLbl);\n    }\n\n    get cancelLbl(){\n        return this.getAttribute(\"cancel-lbl\") || \"Cancel\";\n    }\n\n    get dialogTitle(){\n        return this._titleRef.innerHTML;\n    }\n\n    set dialogTitle(newTitle: string){\n        this._titleRef.innerText = newTitle;\n    }\n\n    get dialogContent(){\n        return this._contentRef.innerHTML;\n    }\n\n    set dialogContent(newContent: string){\n        this._contentRef.innerHTML = newContent;\n    }\n\n\n    private _cancelBtnRef?: HTMLDivElement;\n    private _confirmBtnRef?: HTMLDivElement;\n    private _confirmBtnClickEvent: Event = new Event(\"confirmed\");\n    private _cancelBtnClickEvent: Event = new Event(\"cancelled\");\n\n    private _titleRef: HTMLDivElement;\n    private _contentRef: HTMLDivElement;\n\n    private _handleCancelBtnClick = (_event: MouseEvent) => {\n        this.dispatchEvent(this._cancelBtnClickEvent);\n        this.open = false;\n    };\n\n    private _handleConfirmBtnClick = (_event: MouseEvent) => {\n        if (this.closeOnConfirm) {\n            this.open = false;\n        }\n        this.dispatchEvent(this._confirmBtnClickEvent);\n    }\n\n}\n\nif (!window.customElements.get(\"ms-dialog-box\")) { window.customElements.define(\"ms-dialog-box\", GameDialogBox); }\n\n\n","import style from \"./index.scss\";\nimport Grid, {EndgameEventState} from \"./components/Grid/index\";\nimport GameEvent from \"./enums/GameEvents\";\n// import EndgameStates from \"./enums/EndgameStates\";\nimport GameDialogBox from \"./components/GameDialogBox/index\";\nimport EndgameStates from \"./enums/EndgameStates\";\n\nexport default class Minesweeper extends HTMLElement {\n\n    public static get observedAttributes() {\n        return [\"width\", \"height\", \"mines\", \"scale\"];\n    }\n\n    constructor(){\n        super();\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>${style}</style>\n            <div id=\"grid-container\"></div>\n        `;\n\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        this._gridContainer = shadowRoot.querySelector<HTMLDivElement>(\"#grid-container\")!;\n        this._dialogBoxRef = shadowRoot.appendChild(\n            new GameDialogBox({\n                confirmBtn:{include: true, lbl: \"New Game\"},\n            })\n        );\n\n        this.addEventListener(GameEvent.GAME_END, this._handleGameEnd);\n        this._dialogBoxRef.addEventListener(\"confirmed\", () => {\n            this.newGame();\n        });\n    }\n\n    connectedCallback(){\n        this.newGame();\n    };\n\n    attributeChangedCallback(name: string, _oldVal: string, _newVal: string) {\n        if (name === \"width\" || name === \"height\") {\n            this.newGame();\n        }\n    }\n\n    get width(){\n        return parseInt(this.getAttribute(\"width\") || \"10\");\n    }\n\n    set width(newValue: number){\n        this.setAttribute(\"width\", newValue.toString());\n    }\n\n    get height(){\n        return parseInt(this.getAttribute(\"height\") || \"10\");\n    }\n\n    set height(newValue: number){\n        this.setAttribute(\"height\", newValue.toString());\n    }\n\n    get mines(){\n        const attr = this.getAttribute(\"mines\");\n        return attr ? parseInt(attr) : null;\n    }\n\n    set mines(newValue: number|null){\n        if (newValue) {\n            this.setAttribute(\"mines\", newValue.toString())\n        } else {\n            this.removeAttribute(\"mines\");\n        }\n    }\n\n    get scale(){\n        const attr = this.getAttribute(\"scale\");\n        return attr ? parseFloat(attr) : 1;\n    }\n\n    set scale(newValue: number){\n        if (newValue) {\n            this.setAttribute(\"scale\", newValue.toString())\n        } else {\n            this.removeAttribute(\"scale\");\n        }\n    }\n\n    public newGame(){\n        this._gridContainer.childNodes.forEach( node => node.remove());\n        this._gridContainer.appendChild( new Grid(this.width, this.height, {mines: this.mines || undefined, scale: this.scale}) );\n    }\n\n\n\n    private _gridContainer: HTMLDivElement;\n    private _dialogBoxRef: GameDialogBox;\n\n    private _handleGameEnd = ((_event: CustomEvent<EndgameEventState>) => {\n        console.log(\"Game Over: \", _event.detail.state);\n        this._dialogBoxRef.dialogTitle = (_event.detail.state === EndgameStates.WIN) ? \"You win\" : \"Game Over\";\n        this._dialogBoxRef.dialogContent = (_event.detail.state === EndgameStates.WIN) ? \"All safe tiles uncovered.\" : \"You uncovered a mine.\";\n        this._dialogBoxRef.open = true;\n    }) as EventListener\n}\n\nwindow.customElements.define(\"minesweeper-game\", Minesweeper);"],"names":["CellEvents","FlagCounter","[object Object]","newValue","flagsRemaining","window","dispatchEvent","CustomEvent","COUNT_UPDATE","detail","EndgameStates","Cell","HTMLElement","coordinate","isMined","adjacentMines","opts","super","this","event","isHighlighted","_highlightedEvent","_unhighlightedEvent","flagged","covered","preventDefault","_revealNeighborsEvent","handleMouseEnter","handleMouseLeave","handleMouseClick","handleMouseAltClick","handleMouseDblClick","_mineUncoveredEvent","setAttribute","neighborHighlight","_refContent","textContent","toString","_hasChainRevealed","_removeEventListeners","setTimeout","_triggerChainReveal","classList","add","cellScale","scale","style","setProperty","customEventOptions","bubbles","composed","HIGHLIGHTED","UNHIGHLIGHTED","_uncoverEvent","UNCOVERED","MINE_UNCOVERED","NEIGHBOR_REVEAL","TRIGGER_CHAIN_REVEAL","template","document","createElement","innerHTML","shadowRoot","attachShadow","mode","appendChild","content","cloneNode","querySelector","observedAttributes","newState","JSON","stringify","parse","getAttribute","_addEventListeners","name","_oldVal","_newVal","_hasUncovered","_handleMineReveal","_handleStandardReveal","setFlagsRemaining","flagIcon","_inputEvents","forEach","addEventListener","removeEventListener","customElements","define","GameEvents","Adjacency","origin","dimensions","filter","isLowerBound","every","xy","isUpperBound","Random","min","max","_min","Math","ceil","_max","floor","random","Toolbar","_timeElapsed","timeStr","map","digit","padStart","join","_refTimeElapsed","_refFlagCounter","_timerID","startTimer","parseInt","setInterval","handleTimeInc","clearInterval","Grid","columns","rows","options","cellCoordinate","coordinates","neighborCell","cellRef","cellCoord","_revealCellNeighbors","hasGameLost","_toolbarRef","stopTimer","flat","cell","GAME_END","state","LOSE","WIN","mines","sqrt","_generateCelConstructorData","_rowContainer","rowIndex","_insertRow","_handleCellHighlight","_handleCellUnHighlight","_handleNeighborReveal","_handleMineUncovered","once","_checkEndGameStatus","minesRemaining","cellRowData","Array","columnIndex","_cellConstructorData","push","int","coord","reduce","a","b","newRow","className","rowRef","cellData","tile","GameDialogBox","Event","_event","_cancelBtnClickEvent","open","closeOnConfirm","_confirmBtnClickEvent","confirmBtn","include","lbl","confirmLbl","cancelBtn","cancelLbl","title","slot","innerText","_cancelBtnRef","undefined","_confirmBtnRef","_titleRef","_contentRef","_handleCancelBtnClick","_handleConfirmBtnClick","hasAttribute","newLbl","dialogTitle","newTitle","dialogContent","newContent","get","Minesweeper","console","log","_dialogBoxRef","_gridContainer","GameEvent","_handleGameEnd","newGame","width","height","attr","removeAttribute","parseFloat","childNodes","node","remove"],"mappings":"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"}